%%Website about code coverage RTL PST/PSL
@misc{ProjectVeriPage2020Oct,
	author = {{Project VeriPage}},
	title = {{PSL: Verification and Modeling Layers}},
	year = {2020},
	month = {Oct},
	note = {[Online; January 2021]},
	howpublished = {\url{http://www.project-veripage.com/psl_tutorial_7.php}}
}

%% In Calibre ugly cover book blu yellow
@book{bergeron2006verification,
  title={Verification methodology manual for SystemVerilog},
  author={Bergeron, Janick and Cerny, Eduard and Hunter, Alan and Nightingale, Andy},
  year={2006},
  publisher={Springer Science \& Business Media}
}

%% Decent article about TLM end of orange folder
@book{kogel2005ocp,
  title={Ocp tlm for architectural modeling},
  author={Kogel, Tim},
  year={2005},
  publisher={Citeseer}
}

%% ref about coverage in system verilog
@misc{BibEntry2020Oct,
    author = {ChipVerify},
	title = {{SystemVerilog Functional Coverage}},
	journal = {ChipVerify},
	year = {2020},
	month = {Oct},
	note = {[Online; January 2021]},
	howpublished = {\url{https://www.chipverify.com/systemverilog/systemverilog-functional-coverage}}
}


%% System Verilog book
@book{sutherland2006systemverilog,
  title={SystemVerilog for Design Second Edition: A Guide to Using SystemVerilog for Hardware Design and Modeling},
  author={Sutherland, Stuart and Davidmann, Simon and Flake, Peter},
  year={2006},
  publisher={Springer Science \& Business Media}
}


@article{mehta2017a,
  title = {Constrained Random Verification (CRV)},
  language = {eng},
  publisher = {Springer International Publishing},
  journal = {Asic/soc Functional Design Verification},
  pages = {65-74},
  year = {2017},
  isbn = {9783319594187, 9783319594170},
  abstract = {Constrained Random Verification (CRV) is a methodology that is supported by SystemVerilog which has a built-in constraint solver. This allows you to constraint your stimulus to better target a design function, thereby allowing you to reach your coverage goal faster with accuracy. From that sense, coverage and CRV go hand in hand. You check your coverage and see where the coverage holes are. You then constrain your stimulus to target those holes and improve coverage.},
  doi = {10.1007/978-3-319-59418-7_5, 10.1007/978-3-319-59418-7},
  author = {Mehta, Ashok B. and Mehta, Ashok, B.}
}


%% Paper about SystemC and how to enable CRV with CRAVE
@inproceedings{haedicke2012crave,
  title={CRAVE: An advanced constrained random verification environment for SystemC},
  author={Haedicke, Finn and Le, Hoang M and Gro{\ss}e, Daniel and Drechsler, Rolf},
  booktitle={2012 International Symposium on System on Chip (SoC)},
  pages={1--7},
  year={2012},
  organization={IEEE}
}

%% Extension of CRAVE in SystemC
@inproceedings{le2015boosting,
  title={Boosting SystemC-based testbenches with modern C++ and coverage-driven generation},
  author={Le, Hoang M and Drechsler, Rolf},
  booktitle={Proceedings of the Design and Verification Conference and Exhibition Europe (DVCon)},
  year={2015},
  organization={sn}
}

%% Paper published for cocotb-coverage
@inproceedings{cieplucha2016new,
  title={New architecture of the object-oriented functional coverage mechanism for digital verification},
  author={Cieplucha, Marek and Pleskacz, Witold},
  booktitle={2016 1st IEEE International Verification and Security Workshop (IVSW)},
  pages={1--6},
  year={2016},
  organization={IEEE}
}



%% Cocotb website
@misc{cocotb2020Sep,
	author = {cocotb},
	title = {{cocotb}},
	note = {[Online; January 2021]},
	howpublished = {\url{https://github.com/cocotb/cocotb}}
}

%% Cocotb coverage website
@misc{mciepluc2020Sep,
	author = {mciepluc},
	title = {{cocotb-coverage}},
	note = {[Online; January 2021]},
	howpublished ={\url{https://github.com/mciepluc/cocotb-coverage}}
}

%% Reference to the library used by cocotb-coverage python-constraint
@misc{python-constraint2020Sep,
	author = {python-constraint},
	title = {{python-constraint}},
	note = {[Online; January 2021]},
	howpublished ={\url{https://github.com/python-constraint/python-constraint}}
}


%% Optaplanner other CSP written in Java
@misc{online:optaplanner,
	title = {{OptaPlanner, Constraint satisfaction solver (Java{\texttrademark}, Open Source)}},
	note = {[Online; January 2021]},
	howpublished ={\url{https://www.optaplanner.org}}
}

%% Article about Agile development and FPGAs
@article{Groleat2020Jan,
	author = {Grol{\ifmmode\acute{e}\else\'{e}\fi}at, Tristan},
	title = {{Using FPGAs in an agile development workflow {$\vert$} OVHcloud Blog}},
	journal = {OVHcloud Blog},
	year = {2020},
	month = {Jan},
	howpublished ={\url{https://www.ovh.com/blog/using-fpgas-in-an-agile-development-workflow}}
}

%% Book about SystemVerilog and verification
@book{spear2008systemverilog,
  title={SystemVerilog for verification: a guide to learning the testbench language features},
  author={Spear, Chris},
  year={2008},
  publisher={Springer Science \& Business Media}
}

%% Full implementation of uvm in CoCoTb
@misc{tpoikela2020Oct,
	author = {tpoikela},
	title = {{uvm-python}},
	journal = {GitHub},
	year = {2020},
	month = {Oct},
	note = {[Online; January 2021]},
	howpublished ={\url{https://github.com/tpoikela/uvm-python}}
}

%% repository about modifying output of sbt report
@misc{s2020Octsbtmario-galic,
	author = {mario-galic},
	title = {{scalatest-custom-reporter-example}},
	journal = {GitHub},
	year = {2020},
	month = {Oct},
	note = {[Online; January 2021]},
	howpublished ={\url{https://github.com/mario-galic/scalatest-custom-reporter-example}}
}

%% reference about github lcov
@misc{linux-test-project2020Oct,
	author = {linux-test-project},
	title = {{lcov}},
	journal = {GitHub},
	year = {2020},
	month = {Oct},
	note = {[Online; January 2021]},
	howpublished ={\url{https://github.com/linux-test-project/lcov}}
}


%% jgenhtml implementation of lcov in java google summer of code
@misc{ricksbrown2020Oct,
	author = {ricksbrown},
	title = {{jgenhtml}},
	journal = {GitHub},
	year = {2020},
	month = {Oct},
	note = {[Online; January 2021]},
	howpublished ={\url{https://github.com/ricksbrown/jgenhtml}}
}

%% note about writing a coverage report
@misc{Badawi2017Mar,
	author = {Badawi, Ismail},
	title = {{Writing a Code Coverage Tool - Ismail Badawi}},
	year = {2017},
	month = {Mar},
	note = {[Online; January 2021]},
	howpublished ={\url{http://ismail.badawi.io/blog/2013/05/03/writing-a-code-coverage-tool}}
}


%% article about verilator and coverage
@misc{verilatorcoveragearticle,
    author = {CovVise},
	title = {{CovVise: How We Stopped Throwing Away  Interesting Coverage Data }},
	year = {2009},
	month = {Oct},
	note = {[Online; January 2021]},
	howpublished ={\url{https://www.veripool.org/papers/CovVise_SNUGBos09_paper.pdf}}
}

%% article about systemverilog constraint
@misc{systemverilogconstraintgot,
    author = {Ahmed Yehia},
	title = {{The Top Most Common SystemVerilog Constrained Random Gotchas}},
	year = {2014},
	month = {Oct},
	note = {[Online; January 2021]},
	howpublished ={\url{https://dvcon-europe.org/sites/dvcon-europe.org/files/archive/2014/proceedings/T5_1_paper.pdf}}
}
%% standard for unfied coverage database
@article{accellera1unified,
  title={Unified Coverage Interoperability Standard (UCIS)},
  author={Accellera Systems Initiative and others},
  journal={Version},
  volume={1},
  year={2012},
  pages={362}
}

@misc{ieee2017ieee,
  title={IEEE Standard for SystemVerilog C Unified Hardware Design, Specification, and Verification (IEEE Std 1800-2017)},
  author={IEEE System Verilog Working Group and others},
  year={2017},
  publisher={IEEE}
}

@misc{ieee-e2019,
  title={IEEE 1647-2019 - IEEE Standard for the Functional Verification Language e},
  author={IEEE System Verilog Working Group and others},
  year={2019},
  publisher={IEEE}
}



@misc{coveragedatabaseucis,
  title={Unified Coverage Interoperability Standard (UCIS)},
  author={Accelera},
  year={2012},
  publisher={Accelera}
}
%% Article about formal methods from google
@article{FormalGoogle,
	author = { Reid, Church, Flur},
	title = {{Towards making formal methods normal: meeting developers where they are}},
	journal = {arXiv.org},
	year = {2020},
	month = {Jan},
	howpublished ={\url{https://arxiv.org/pdf/2010.16345.pdf}}
}
%% Symbolic-exectuion article about Z3 and formal methods
@misc{symbolic-execution,
    author = {deniable},
	title = {{Practical Symbolic Execution and SATisfiability Module Theories (SMT) 101}},
	journal = {Shut Up and Hack},
	year = {2018},
	month = {May},
	note = {[Online; January 2021]},
	howpublished = {\url{http://deniable.org/posts/symbolic-execution}}
}
 
%% Definiton of state space from math insight
@misc{definitionofstatespace,
    author = {Nykamp Duane},
	title = {{State space definition}},
	journal = {Math Insights},
	year = {2019},
	month = {11},
	note = {[Online; January 2021]},
	howpublished = {\url{https://mathinsight.org/definition/state_space}}
}
%% Java library for constraint I can use it for some text maybe
@inproceedings{wolf2006object,
  title={Object-Oriented Constraint Programming in Java Using the Library firstcs.},
  author={Wolf, Armin},
  booktitle={WLP},
  pages={21--32},
  year={2006}
}

%% Artificial intelligence a modern approach
@book{russell2002artificial,
  title={Artificial intelligence: a modern approach},
  author={Russell, Stuart and Norvig, Peter},
  year={2002},
  publisher={Prentice Hall}
}


%% Paper about IC development from 1965
@article{4785860,
  author={G. E. {Moore}},
  journal={IEEE Solid-State Circuits Society Newsletter}, 
  title={Cramming more components onto integrated circuits, Reprinted from Electronics, volume 38, number 8, April 19, 1965, pp.114 ff.}, 
  year={2006},
  volume={11},
  number={3},
  pages={33-35},
  doi={10.1109/N-SSC.2006.4785860}}

%% Paper about constraint
@article{tsang1999glimpse,
  title={A glimpse of constraint satisfaction},
  author={Tsang, Edward},
  journal={Artificial Intelligence Review},
  volume={13},
  number={3},
  pages={215--227},
  year={1999},
  publisher={Springer}
}

%% Asic Soc Functional Design Verification
@article{mehta2018asic,
  title={ASIC/SoC functional design verification},
  author={Mehta, Ashok B},
  journal={Publ. Springer},
  year={2018},
  publisher={Springer}
}

%% Functional Verification coverage measurement and analysis good book
@book{piziali2007functional,
  title={Functional verification coverage measurement and analysis},
  author={Piziali, Andrew},
  year={2007},
  publisher={ \hfill \break Springer Science \& Business Media}
}

%% Paper about trends in the verification industries
@inproceedings{foster2015trends,
  title={Trends in functional verification: A 2014 industry study},
  author={Foster, Harry D},
  booktitle={Proceedings of the 52nd Annual Design Automation Conference},
  pages={1--6},
  year={2015}
}


%% Principles of verifiable RTL desing
@book{bening2001principles,
  title={Principles of verifiable RTL design},
  author={Bening, Lionel and Foster, Harry},
  year={2001},
  publisher={Springer}
}

%%% Chisel
@inproceedings{bachrach2012chisel,
  title={Chisel: constructing hardware in a scala embedded language},
  author={Bachrach, Jonathan and Vo, Huy and Richards, Brian and Lee, Yunsup and Waterman, Andrew and Avi{\v{z}}ienis, Rimas and Wawrzynek, John and Asanovi{\'c}, Krste},
  booktitle={DAC Design Automation Conference 2012},
  pages={1212--1221},
  year={2012},
  organization={IEEE}
}
%%github
@misc{github:kratos,
    author = "{Kuree Keyi Zhang,Leonard Truong, makaimann}", title = "Kratos",
    year = "2020",
    howpublished = "\url{https://github.com/Kuree/kratos}",
    note = "[Online; January 2021]"
  }
  
%%github
@misc{presentation:cerncocotb,
    author = "{KBen Rosser}",
    title = "Cocotb: a Python-based digital logic verification framework",
    year = "2018",
    howpublished = "\url{https://indico.cern.ch/event/776422/attachments/1769690/2874927/cocotb_talk.pdf}",
    note = "[Online; January 2021]"
  }
  
%% Verischemelog
@article{jennings1999verischemelog,
  title={Verischemelog: Verilog embedded in scheme},
  author={Jennings, James and Beuscher, Eric},
  journal={ACM SIGPLAN Notices},
  volume={35},
  number={1},
  pages={123--134},
  year={1999},
  publisher={ACM New York, NY, USA}
}

%% Genesis2
@inproceedings{shacham2012avoiding,
  title={Avoiding game over: Bringing design to the next level},
  author={Shacham, Ofer and Galal, Sameh and Sankaranarayanan, Sabarish and Wachs, Megan and Brunhaver, John and Vassiliev, Artem and Horowitz, Mark and Danowitz, Andrew and Qadeer, Wajahat and Richardson, Stephen},
  booktitle={DAC Design Automation Conference 2012},
  pages={623--629},
  year={2012},
  organization={IEEE}
}

%% VHDL hand book
@book{coelho2012vhdl,
  title={The VHDL handbook},
  author={Coelho, David R},
  year={2012},
  publisher={Springer Science \& Business Media}
}

%% Verilog tutorail
@article{tala2003verilog,
  title={Verilog tutorial},
  author={Tala, Deepak Kumar},
  year={2003}
}

%% e verification language
@book{iman2007hardware,
  title={The e hardware verification language},
  author={Iman, Sasan and Joshi, Sunita},
  year={2007},
  publisher={Springer Science \& Business Media}
}

%% design and verification languages
@book{edwards2004design,
  title={Design and Verification languages},
  author={Edwards, Stephen A},
  year={2004},
  publisher={Nov}
}


%% an overview of system verilog
@misc{online:anoverviewofsysv,
    author = "{EDN}",
    title = "An overview of SystemVerilog 3.1",
    year = "2003",
    howpublished = "\url{https://www.edn.com/an-overview-of-systemverilog-3-1/}",
    note = "[Online; January 2021]"
  }

%% 
 @article{sutherland2003overview,
  title={An overview of SystemVerilog 3.1},
  author={Sutherland, S},
  journal={EEdesign, May, available at \url{http://www.eetimes. com/news/design/features/showArticle.jhtml?articleID}}, volume={16501063},
  year={2003}
}

%% If sysverilog is so good why UVM
@inproceedings{bromley2013if,
  title={If SystemVerilog is so good, why do we need the UVM? Sharing responsibilities between libraries and the core language},
  author={Bromley, Jonathan},
  booktitle={Proceedings of the 2013 Forum on specification and Design Languages (FDL)},
  pages={1--7},
  year={2013},
  organization={IEEE}
}

%% SystemVerilog reflections
@misc{online:sysvreflections,
    author = "{Verification Gentleman}",
    title = "The Humble Beginnings of a SystemVerilog Reflection API",
    year = "2016",
    howpublished = {\url{https://blog.verificationgentleman.com/2016/04/systemverilog-reflection-api.html}},
    note = "[Online; January 2021]"
}
  
%% UVM user guide  
@article{methodology20111,
  title={1.2 User’s Guide},
  author={Methodology, Universal Verification},
  journal={Accellera, May},
  year={2011}
}
%% UVM class reference
@article{initiative94558universal,
  title={Universal Verification Methodology (UVM) 1.2 Class Reference},
  author={Initiative, Accellera S},
  journal={Napa, CA},
  volume={94558}
}

@misc{openverapapaer,
  title={Openvera assertions white paper},
  author={Synopsys},
  journal={Synopsys},
}

%% FIRRTL
@INPROCEEDINGS{8203780, 
author={A. Izraelevitz and J. Koenig and P. Li and R. Lin and A. Wang and A. Magyar and D. Kim and C. Schmidt and C. Markley and J. Lawson and J. Bachrach}, 
booktitle={2017 IEEE/ACM International Conference on Computer-Aided Design (ICCAD)}, 
title={Reusability is FIRRTL ground: Hardware construction languages, compiler frameworks, and transformations}, 
year={2017}, 
volume={}, 
number={}, 
keywords={field programmable gate arrays;hardware description languages;program compilers;software reusability;hardware development practices;hardware libraries;open-source hardware intermediate representation;hardware compiler transformations;Hardware construction languages;retargetable compilers;software development;virtual Cambrian explosion;hardware compiler frameworks;parameterized libraries;FIRRTL;FPGA mappings;Chisel;Flexible Intermediate Representation for RTL;Reusability;Hardware;Libraries;Hardware design languages;Field programmable gate arrays;Tools;Open source software;RTL;Design;FPGA;ASIC;Hardware;Modeling;Reusability;Hardware Design Language;Hardware Construction Language;Intermediate Representation;Compiler;Transformations;Chisel;FIRRTL}, 
doi={10.1109/ICCAD.2017.8203780}, 
ISSN={1558-2434}, 
month={11},}


%% Treadle
@misc{online:treadle,
    author = "{chipsalliance}",
    title = "treadle",
    year = "2018",
    howpublished = "\url{https://github.com/chipsalliance/treadle}",
    note = "[Online; January 2021]"
  }


%% CoCoTb video presentation
@misc{online:cocotbpresentation,
    author = "{Philipp Wagner}",
    title = "Cocotb: Python-powered hardware verification",
    year = "2019",
    howpublished = "\url{https://www.youtube.com/watch?v=GUcKJ5zXgPA}",
    note = "[Online; January 2021]"
  }
  
  
 %% UVM python 
  @misc{online:uvmpython,
    author = "{Tuomas Poikela}",
    title = "uvm-python",
    year = "2018",
    howpublished = "\url{https://github.com/tpoikela/uvm-python}",
    note = "[Online; January 2021]"
  }
  
%% Intel FVDI-bug
@misc{online:intelfvd,
	author = {Thomas R. Nicely},
	title = "Pentium FDIV flaw FAQ",
	year = {2011},
	howpublished = {\url{https://faculty.lynchburg.edu/~nicely/pentbug/pentbug.html}}
}


%% Intel picture
@misc{mistry10nm,
  title={nm technology leadership [online]. 2017},
  author={Mistry, Kaizad},
  howpublished={\url{https://newsroom. intel. com/newsroom/wp-content/uploads/sites/11/2017/03/Kaizad-Mistry-2017-Manufacturing. pdf}},
  year={2017}
}

%% Red book soc design 
@book{keating2011simple,
  title={The Simple Art of SoC Design: Closing the Gap Between RTL and ESL},
  author={Keating, Michael},
  year={2011},
  publisher={Springer Science \& Business Media}
}

%% A lot of colors book
@book{meyer2003principles,
  title={Principles of functional verification},
  author={Meyer, Andreas},
  year={2003},
  publisher={Elsevier}
}

%% SystemC book with blu cover
@inproceedings{jain1995advanced,
  title={Advanced verification techniques based on learning},
  author={Jain, Jawahar and Mukherjee, Rajarshi and Fujita, Masahiro},
  booktitle={Proceedings of the 32nd annual ACM/IEEE Design Automation Conference},
  pages={420--426},
  year={1995}
}
%% Desing Patterns
@article{johnson1995design,
  title={Design patterns},
  author={Johnson, Ralph and Vlissides, John},
  journal={Elements of Reusable Object-Oriented Software Addison-Wesley, Reading},
  year={1995}
}



@misc{online:verificationguide,
    author = "{Verification Guide}",
    title = "Evolution of SystemVerilog",
    year = "2017",
    howpublished = "\url{https://verificationguide.com/systemverilog/}",
    note = "[Online; January 2021]"
  }
  
@misc{online:jacop,
    author = "{radsz}",
    title = "JaCoP",
    year = "2001",
    howpublished = "\url{https://github.com/radsz/jacop}",
    note = "[Online; January 2021]"
  }
  
@misc{online:scala-csp,
    author = "{adamschoenemann}",
    title = "scala-csp",
    year = "2017",
    howpublished = "\url{https://github.com/adamschoenemann/scala-csp}",
    note = "[Online; January 2021]"
}

@misc{online:csp-solver-scala,
    author = "{mguenther}",
    title = "csp-solver-scala",
    year = "2017",
    howpublished = "\url{https://github.com/mguenther/csp-solver-scala}",
    note = "[Online; January 2021]"
}

@inproceedings{kitchen2007stimulus,
  title={Stimulus generation for constrained random simulation},
  author={Kitchen, Nathan and Kuehlmann, Andreas},
  booktitle={2007 IEEE/ACM International Conference on Computer-Aided Design},
  pages={258--265},
  year={2007},
  organization={IEEE}
}

@misc{online:eadaplayground,
    author = "{doulos}",
    title = "Eda playground",
    year = "2020",
    howpublished = "\url{https://www.edaplayground.com}",
    note = "[Online; January 2021]"
}

@misc{online:leros,
    author = "{Martin Schoeberl, James Caska}",
    title = "Leros",
    year = "2018",
    howpublished = "\url{https://github.com/leros-dev/leros}",
    note = "[Online; January 2021]"
}

@misc{github:chiselverify,
    author = "{Martin Schoeberl, Andrew Dobis, Kasper Hesse, Enrico Tolotto, Tjark Petersen, Simon Thye Andersen, Hans Jakob Damsgaard, Yuriy Gritsenko}",
    title = "chiselverify",
    year = "2020",
    howpublished = "\url{https://github.com/chiselverify/chiselverify}",
    note = "[Online; January 2021]"
}

@misc{github:f-csp,
    author = "{Enrico Tolotto}",
    title = "F-CSP",
    year = "2020",
    howpublished = "\url{https://github.com/parzival3/F-CSP}",
    note = "[Online; January 2021]"
}

@misc{online:sonatype,
    author = "{sonatype}",
    title = "sonatype",
    year = "2020",
    howpublished = "\url{https://www.sonatype.com}",
    note = "[Online; January 2021]"
}

@misc{github:hwt,
    author = "{Nic30, Marek Beňo, zuzanica, Michael Gielda}",
    title = "hwt",
    year = "2020",
    howpublished = "\url{https://github.com/Nic30/hwt}",
    note = "[Online; January 2021]"
}



@inproceedings{whydesingmustchange,
author = {Horowitz, Mark},
title = {Why Design Must Change: Rethinking Digital Design},
year = {2009},
isbn = {9781605587981},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
howpublished ={https://doi.org/10.1145/1669112.1669147},
doi = {10.1145/1669112.1669147},
abstract = {In the mid 1980's the power growth that accompanied scaling forced the industry to focus on CMOS technology, and leave nMOS and bipolars for niche applications. Twenty years later, CMOS technology is facing power issues of its own. After first reviewing the "cause" of the problem, it will become clear that there are not easy solutions this time -- no new technology or simple system/circuit change will rescue us. Power, and not number of devices is now the primary limiter of chip performance, and the need to create power efficient designs is changing how we do design. In the past, we would turn to specialized computation (ASICs) to create the needed efficiency, but the rising NRE costs for chip design (now over $10M/chip) has caused the number of ASIC design starts to fall not rise.To get out of this paradox, we need to change the way we think about chip design. For many reasons I don't believe that either the current SoC, or high-level language effort will solve this problem. Instead, we should acknowledge that working out the interactions in a complex design is complex, and will cost a lot of money, even when we do it well. So once we have worked it out, we want to leverage this solution over a broader class of chips. We can accomplish this by creating a "fixed" system architecture, but of very flexible components. That is, instead of building a programmable chip to meet a broad class of application needs, you create a virtual programmable chip, that is MUCH more flexible than any real chip. The application designer (the new chip designer) will then configure this substrate to optimize for their application and then create that chip. To demonstrate how this might work, we use a multiprocessor generator to create a customized CMP which executes H.264 encode with an energy efficiency comparable to an ASIC. As we show in this example for very low energy computation, DRAM energy can be an issue, and we will end the talk describing how to address this final energy frontier.},
booktitle = {Proceedings of the 42nd Annual IEEE/ACM International Symposium on Microarchitecture},
pages = {267},
numpages = {1},
location = {New York, New York},
series = {MICRO 42}
}

@misc{prudchoco4,
  title={Choco solver 4: a Free Open-Source Java},
  author={Prud’homme, Charles and Fages, Jean-Guillaume}
}

@article{rich2003evolution,
  title={The evolution of SystemVerilog},
  author={Rich, David I},
  journal={IEEE Annals of the History of Computing},
  volume={20},
  number={04},
  pages={82--84},
  year={2003},
  publisher={IEEE Computer Society}
}

@misc{online:binarizationconstraint,
    author = "{Roman Barták}",
    title = "Binarization of Constraints",
    year = "1998",
    howpublished = "\url{https://ktiml.mff.cuni.cz/~bartak/constraints/binary.htm}",
}

@Misc{verilatormanual,
    author = "Veripool",
    title = "Verilator Manual",
    howpublished  = {\url{https://www.veripool.org/wiki/verilator/Manual-verilator}},
    year = {2020}
}

@Misc{verilator,
    author = "Veripool",
    title = "Verilator",
    howpublished  = {\url{https://github.com/verilator/verilator}},
    year = {2020}
}

@Misc{jgenhtml,
    author = "Rick Brown",
    title = "Jgenhtml",
    howpublished  = {\url{https://github.com/ricksbrown/jgenhtml}},
    year = {2020}
}

@Misc{Lcov,
    author = "Linux Test Project",
    title = "LCOV",
    howpublished  = {\url{http://ltp.sourceforge.net/coverage/lcov.php}},
    year = {2020}
}

@Misc{ScalaTest,
    author = "Artima",
    title = "ScalaTest",
    howpublished  = {\url{https://www.scalatest.org/}},
    year = {2020}
}

@Misc{SystemPerl,
    author = "Veripool",
    title = "SystemPerl",
    howpublished  = {\url{https://www.veripool.org/projects/systemperl/wiki/Manual-systemperl}},
    year = {2020}
}

@misc{github:coverage,
    author = "{Enrico Tolotto}",
    title = "Coverage",
    year = "2020",
    howpublished = "\url{https://github.com/parzival3/Coverage}",
    note = "[Online; January 2021]"
}

@INPROCEEDINGS{496013,
  author={C. {Dawson} and S. K. {Pattanam} and D. {Roberts}},
  booktitle={Proceedings. IEEE International Verilog HDL Conference}, 
  title={The Verilog Procedural Interface for the Verilog Hardware Description Language}, 
  year={1996},
  volume={},
  number={},
  pages={17-23},
  doi={10.1109/IVC.1996.496013}}

@book{rossi2006handbook,
  title={Handbook of constraint programming},
  author={Rossi, Francesca and Van Beek, Peter and Walsh, Toby},
  year={2006},
  publisher={Elsevier}
}

@Inbook{Chowdhary2020,
author="Chowdhary, K. R.",
title="Constraint Satisfaction Problems",
bookTitle="Fundamentals of Artificial Intelligence",
year="2020",
publisher="Springer India",
address="New Delhi",
pages="273--302",
abstract="Constraint Satisfaction Problems (CSPs) is a theory about some special type of problems, where every move of search is subject to fulfillmentConstraints Satisfaction Problems (CSP)Constraints Satisfaction Problems (CSP) of certain constraints. The chapter introduces with such problems in the beginning, then presents a formal general model of such problems with analysis, explains the solution approach with the synthesis of constraints using simple, as well extended theory of synthesis. Next, it presents the classes of CSP algorithms---generate and test, backtracking, discusses how efficiency can be increased, propagation of constraints, followed with cryptarithmetics, chapter summary, and then at the end a list of exercises for practicing.",
isbn="978-81-322-3972-7",
doi="10.1007/978-81-322-3972-7_10",
url="https://doi.org/10.1007/978-81-322-3972-7_10"
}

@inproceedings{nethercote2007minizinc,
  title={MiniZinc: Towards a standard CP modelling language},
  author={Nethercote, Nicholas and Stuckey, Peter J and Becket, Ralph and Brand, Sebastian and Duck, Gregory J and Tack, Guido},
  booktitle={International Conference on Principles and Practice of Constraint Programming},
  pages={529--543},
  year={2007},
  organization={Springer}
}